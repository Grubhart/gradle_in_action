
import com.manning.gia.ProjectVersion
import com.manning.gia.ReleaseVersionTask

apply plugin: 'war'
apply plugin: 'announce'
ext.versionFile = file('version.properties')

task loadVersion(description: 'load Property file'){
    project.version=readversion()
}

ProjectVersion readversion(){

    logger.quiet 'Reading the version File'

    if (!versionFile.exists()){
        throw new GradleException("Required version File not exist  $versionFile.cannonicalPath")
    }

    Properties properties = new Properties()

    versionFile.withInputStream{ stream ->
        properties.load(stream)
    }

    new ProjectVersion(properties.major.toInteger(),properties.minor.toInteger(),properties.release.toBoolean())
}





task printVersion << {
    logger.quiet "Version: $version"
}

task makeReleaseVersion(type: ReleaseVersionTask){
    release=version.release
    destFile=versionFile

    doLast{
        announce.announce("hola",'local')
    }

}



task createDistributionTask(type: Zip, dependsOn: makeReleaseVersion){
    from war.outputs.files

    from(sourceSets*.allSource){
        into 'src'
    }
    from(rootDir){
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy){

    from createDistributionTask.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution)<<{
    logger.quiet 'Releasing the Project'
}

tasks.addRule("Pattern: increment<Classifier>Version - Increments the project version classifier ." ) {
    String taskName ->

        if(taskName.startsWith('increment') && taskName.endsWith('Version')){
            task(taskName)<<{

                String classifier = (taskName - 'increment'  - 'Version').toLowerCase()
                String currentVersion = version.toString()

                switch (classifier){
                    case 'major': ++version.major
                                    break

                    case 'minor': ++version.minor
                        break

                    default: throw new GradleException("Invalid version Type $classifier. Allowed types: ['Major', 'Minor' ]")
                        break
                }

                String newVersion = version.toString()
                logger.info "increment $classifier version $currentVersion -> $newVersion"

                ant.propertyfile(file: versionFile){
                    entry(key: classifier, type: 'int', operation: '+', value: 1)

                }

            }
        }


}
